{"version":3,"sources":["components/ClickCard/index.js","components/Replay/index.js","components/Score/index.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["require","ClickCard","props","react_default","a","createElement","className","src","image","alt","name","onClick","handleClick","Replay","id","reset","Score","score","topScore","Navbar","_ref","message","height","App","state","cards","currentScore","wasClicked","gameOver","ResetGame","_this","setState","ShuffleLlamas","array","i","length","j","Math","floor","random","tempLlama","HandleClickEvent","includes","concat","MakeLlamas","map","card","components_ClickCard","key","components_Navbar","this","components_Score","components_Replay","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.865f1a49.chunk.js","sourcesContent":["import React from \"react\";\nrequire(\"./style.css\")\n\nfunction ClickCard(props) {\n    return (\n        // <div className=\"col s4\">\n        <div className=\"card z-depth-3 clickCard\">\n            <div className=\"card-content center\">              \n                <img \n                    src={props.image}\n                    alt={props.name}\n                    onClick={() => props.handleClick(props.name)}\n                />      \n            </div>\n        </div>\n        // </div>\n    )\n}\n\nexport default ClickCard;","import React from \"react\";\nrequire (\"./style.css\")\n\nfunction Replay(props) {\n    return (\n    <div id=\"replay\">\n        <div className=\"modal-content center-align\">\n            <h4>Game Over!</h4>\n        </div>\n        <div className=\"modal-footer center-align\">\n            <button onClick={props.reset} className=\"waves-effect waves-light btn\">Play Again</button>\n        </div>\n    </div>\n    )\n}\n\nexport default Replay;","import React from \"react\";\nimport \"./style.css\"\n\nfunction Score(props) {\n    return (\n        <div className=\"row\">\n            <div className=\"card scoreCard col s12 m4 push-m4 z-depth-3\">\n                <div className=\"card-content scoreContent\">\n                    <div className=\"row center\">\n                        <h4 className=\"score\">Your Score: {props.score}</h4>\n                    </div>\n                    <div className=\"row center\">\n                        <h4 className=\"score\">Top Score:  {props.topScore}</h4>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Score;","import React from \"react\";\nrequire(\"./style.css\")\n\nfunction Navbar({ message }) {\n    return (\n        <nav>\n            <div className=\"nav-wrapper z-depth-3\">\n                <h1 className=\"brand-logo hide-on-med-and-down\">\n                    <figure className=\"swing\">\n                    <img src=\"./img/LlamaLogo.png\" alt=\"Llama Logo\" className=\"logo\" height=\"140\"></img>\n                    </figure>\n                </h1>\n                <h3 className=\"right message hide-on-med-and-down\">{message}</h3>\n            </div>\n        </nav>\n    )\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport ClickCard from \"./components/ClickCard\";\nimport Replay from \"./components/Replay\";\n// import Footer from \"./components/Footer\";\nimport cards from \"./cards.json\";\nimport Score from \"./components/Score\";\nimport Navbar from './components/Navbar';\n// import './App.css';\n// const cards = require (\"./cards.json\");\n\nclass App extends Component {\n  state = {\n    cards,\n    currentScore: 0,\n    topScore: 0,\n    wasClicked: [],\n    gameOver: false,\n    message: \"Click a Llama to Begin!\"\n  }\n\n\n  //Game Logic \n  ResetGame = () =>  {\n    this.setState({\n      currentScore: 0,\n      gameOver: false,\n      wasClicked: []\n    });\n    this.ShuffleLlamas(cards)\n  }\n\n  //add in more succinct shuffle function here\n  ShuffleLlamas = (array) => {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var tempLlama = array[i];\n      array[i] = array[j];\n      array[j] = tempLlama;\n    }\n  }\n\n  HandleClickEvent = id => {\n    if(this.state.wasClicked.includes(id)) {\n      this.setState({ currentScore: 0 })\n      this.setState({ gameOver: true })\n      if(this.state.currentScore > this.state.topScore){\n        this.setState({ topScore: this.state.currentScore })\n      }\n    } else {\n      this.setState({\n        wasClicked: this.state.wasClicked.concat(id),\n        currentScore: this.state.currentScore +1\n      })\n      this.ShuffleLlamas(this.state.cards);\n    }\n  }\n\n  MakeLlamas = () => {\n    return (\n      this.state.cards.map(card => {\n        return ( \n          <ClickCard \n            key={card.id} \n            id={card.id}\n            name={card.name} \n            image={card.image}\n            handleClick={this.HandleClickEvent}\n          />\n        )\n      })\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar\n          className=\"row\"\n          message={this.state.message}\n        />\n        <Score topScore={this.state.topScore} score={this.state.currentScore}/>\n        <div className=\"flex-container\" id=\"mainContent\">\n          {this.state.gameOver && <Replay reset={this.ResetGame}/>}\n          <div className=\"flex-box\">  \n              {this.MakeLlamas()}    \n          </div>\n        </div>\n      </div>\n      \n    )\n  }\n}\n\nexport default App;\n\n\n\n\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <p>\n//             Edit <code>src/App.js</code> and save to reload.\n//           </p>\n//           <a\n//             className=\"App-link\"\n//             href=\"https://reactjs.org\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             Learn React\n//           </a>\n//         </header>\n//       </div>\n//     );\n//   }\n// }\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}